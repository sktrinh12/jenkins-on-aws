pipeline {
    agent { 
        kubernetes{
            label 'jenkins-slave'
        }
        
    }
    environment{
        AWSID = credentials('AWSID')
        GITHUB_PAT = credentials('github-kinnate-secret-text')
        DOCKER_PSW = credentials('DOCKER_PASSWORD')
        ORACLE_HOST = 'dotoradb-2022-dev.fount'
        ORACLE_PORT = 1521
        ORACLE_SID = credentials('ORACLE_SID')
        ORACLE_USER = credentials('ORACLE_USER')
        ORACLE_PASS = credentials('ORACLE_PASS')
        DOCKER_CONFIG = "${WORKSPACE}/docker.config"
        
    }

    
    stages {
        
        
        
        stage('docker login') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'awscredentials', region: 'us-west-2')]) {
                    sh '''
                        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $AWSID.dkr.ecr.us-west-2.amazonaws.com
                    '''
                    }
                }
            }
        }
        
        
        stage('git clone') {
            steps{
                sh(script: '''
                    git clone https://spencertr:$GITHUB_PAT@github.com/Kinnate/geomean-ic50-flagger.git
                ''', returnStdout: true) 
            }
        }
        
        
        stage('s3 bucket download') {
            steps {
            withAWS(credentials:'awscredentials', region: 'us-west-2') {
                s3Download(file: 'instantclient-basiclite-linux.x64-12.2.0.1.0.zip', bucket: 'fount-data', path: 'DevOps/instantclient-basiclite-linux.x64-12.2.0.1.0.zip')
                s3Download(file: 'instantclient-sdk-linux.x64-12.2.0.1.0.zip', bucket: 'fount-data', path: 'DevOps/instantclient-sdk-linux.x64-12.2.0.1.0.zip')
                sh 'ls -lt'
            }
            }
        }

        
        stage('docker build backend') {
            steps{
               sh( label: 'Docker Build Backend', script:
               '''
                #!/bin/bash
                set -x
                docker build \
                --no-cache --network=host --build-arg ORACLE_HOST=${ORACLE_HOST} --build-arg ENVIR=PROD \
                --build-arg ORACLE_PORT=${ORACLE_PORT} --build-arg ORACLE_SID=${ORACLE_SID} --build-arg ORACLE_USER=${ORACLE_USER} \
                --build-arg ORACLE_PASS=${ORACLE_PASS} --build-arg ORACLE_CREDS_ARG=prod --build-arg INSTANCE_TYPE=prod\
                -t ${AWSID}.dkr.ecr.us-west-2.amazonaws.com/geomean-flagger-backend:latest \
                -f ${WORKSPACE}/geomean-ic50-flagger/backend/Dockerfile.prod .
                ''', returnStdout: true
                )
                
            }
        }
        
        stage('docker build frontend') {
            steps{
                sh( label: 'Docker Build Frontend', script:
                '''
                #!/bin/bash
                set -x
                docker build \
                --no-cache --network=host --build-arg REACT_APP_BACKEND_URL=http://geomean.backend.prod.kinnate:8000 \
                -t $AWSID.dkr.ecr.us-west-2.amazonaws.com/geomean-flagger-frontend:latest \
                -f $WORKSPACE/geomean-ic50-flagger/frontend/Dockerfile.prod .
                ''', returnStdout: true
                )
            }
        }
        
    
        stage('docker push to ecr') {
            steps {
                sh(label: 'ECR docker push frontend', script:
                '''
                docker push $AWSID.dkr.ecr.us-west-2.amazonaws.com/geomean-flagger-frontend:latest
                ''', returnStdout: true
                )
                sh(label: 'ECR docker push backend', script:
                '''
                docker push $AWSID.dkr.ecr.us-west-2.amazonaws.com/geomean-flagger-backend:latest
                ''', returnStdout: true
                )
            }
        }
        
        /*
        stage('docker push backend') {
            steps{
                script{
                    def url = "https://${AWSID}.dkr.ecr.us-west-2.amazonaws.com"
                    docker.withRegistry(url, 'ECR_CREDENTIALS') {
                        docker.image('geomean-flagger-backend').push('latest')
                    }
                }
            }
        } 
        
        stage('docker push frontend') {
            steps{
                script{
                    def url = "https://${AWSID}.dkr.ecr.us-west-2.amazonaws.com"
                    docker.withRegistry(url, 'ECR_CREDENTIALS') {
                        docker.image('geomean-flagger-frontend').push('latest')
                
                    }
                }
            }
        }
        */
        
        stage('deploy') {
            steps{
                sh script: '''
                #!/bin/bash
                cd $WORKSPACE/geomean-ic50-flagger
                curl -LO https://storage.googleapis.com/kubernetes-release/release/\$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                chmod +x ./kubectl
                ./kubectl rollout restart deploy/backend-deploy deploy/frontend-deploy -n gmeanflag
                '''
            }
        }
    }
}
